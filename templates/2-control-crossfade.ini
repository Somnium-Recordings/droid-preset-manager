# -------------------------------------------------
# Control: Crossfader
# -------------------------------------------------

# (PM0) P0: X-Fade Default
[pot]
    selectat = _POT_MODE # 0 = "perform mode"
    select = 0
    pot = P1.1
    output = N1

# Define: POT_EDIT_CV_AB
# When in edit mode, set cross fade either all the way on or off depending on whether an "a" pot or "b" pot is being edited.
# Pot Mode 1-4 is "A/0" where 5-8 is "B/1"
[compare]
    input = _POT_EDIT_CV_MODE
    compare = 5
    ifless = 0
    else = 1
    output = _POT_EDIT_CV_AB

# Off in crossfader actually results in a value of 0. The voltage ends up being .0007 which means things don't completely turn off.
[compare]
    input = I1
    compare = 0.001
    ifless = 0
    else = I1
    output = _XFADE_INPUT_LOW_NORMALIZED

# TODO: validate whether this is needed once we can test outputs with the DATA
[compare]
    input = _XFADE_INPUT_LOW_NORMALIZED
    compare = 0.499
    ifgreater = 0.5
    ifless = _XFADE_INPUT_LOW_NORMALIZED
    output = _XFADE_INPUT_NORMALIZED

# Define: CROSSFADE
# Switch between hard panned crosfader (edit mode) and tracking the input (perform mode)
[switch]
    input1 = _XFADE_INPUT_NORMALIZED * 2
    input2 = _POT_EDIT_CV_AB
    offset = _EDIT_MODE
    output1 = _CROSSFADE

# Define: CROSSFADE_GATED
# Rather than smoothly ramp between crossfaded values, using this in a control
# will allow for immedately switching to the B value when crossfading starts.
[compare]
    input = _CROSSFADE
    compare = 0
    ifgreater = 1
    else = 0
    output = _CROSSFADE_GATED

[compare]
    input = _CROSSFADE
    compare = 0
    ifequal = 1
    output = _CROSSFADE_AT_0

[compare]
    input = _CROSSFADE
    compare = 1
    ifequal = 1
    output = _CROSSFADE_AT_1

; [compare]
;     input = _CROSSFADE
;     compare = 0.5
;     ifgreater = 1
;     output = _CROSSFADE_ABOVE_50

# Define: CROSSFADE_1_0
# Map the crossfader value from [0, 1]  to [1, 0]
[copy]
    input = _CROSSFADE * -1 + 1
    output = _CROSSFADE_1_0

# Define: CROSSFADE_1_0_N1
# Map the crossfader value from [0, 1]  to [1, -1]
; [copy]
;     input = _CROSSFADE * -2 + 1
;     output = _CROSSFADE_1_0_N1

# Define: CROSSFADE_1_0_0
# Clamp the 1 to -1 signal to 1-0. At 50% and above, this will be 0.
; [compare]
;     input = _CROSSFADE_1_0_N1
;     compare = 0
;     ifgreater = _CROSSFADE_1_0_N1
;     ifless = 0
;     output = _CROSSFADE_1_0_0

# Define: CROSSFADE_CROSSED_50
# SIgnal with be 1 once the crossfader has gone above 50% and remain that way until it returns to 0.
; [flipflop]
;     reset = _CROSSFADE_AT_0
;     set = _CROSSFADE_ABOVE_50
;     output = _CROSSFADE_CROSSED_50

# Define: CROSSFADE_DOWN_50
# Maps the crossfader so that the value increases from [0,1] when returning from crossing the 50% threshold.
# A                  50%                  B
# 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0
# 0 < 9 < 7 < 4 < 1 < 0 < 0 < 0 < 0 < 0 < 0
; [switch]
;     input1 = 0
;     input2 = _CROSSFADE_1_0_0
;     offset = _CROSSFADE_CROSSED_50
;     output1 = _CROSSFADE_DOWN_50

# Define: CROSSFADE_CROSSED_1
# SIgnal with be 1 once the crossfader has gone to 100% and remain that way until it returns to 0.
[flipflop]
    reset = _CROSSFADE_AT_0
    set = _CROSSFADE_AT_1
    output = _CROSSFADE_CROSSED_100

# Define: CROSSFADE_DOWN_1
# Maps the crossfader so that the value increases from [0,1] when returning from crossing the 100% threshold.
# A                  50%                  B
# 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0 > 0
# 0 < 9 < 8 < 7 < 6 < 5 < 4 < 3 < 2 < 1 < 0
[switch]
    input1 = 0
    input2 = _CROSSFADE_1_0
    offset = _CROSSFADE_CROSSED_100
    output1 = _CROSSFADE_DOWN_100

# Define: CROSSFADE_HOLD_100
# Maps the crossfader so that the value increases from [0,1] but does not decrease until it returns to 0.
# A                  50%                  B
# 0 > 1 > 2 > 3 > 4 > 5 > 6 > 7 > 8 > 9 > 9
# 0 < 9 < 9 < 9 < 9 < 9 < 9 < 9 < 9 < 9 < 9
#
# 0 > 1 > 2 > 3 > 4 > 5 > 6 > 7 > - > - > -
# 0 < 7 < 7 < 7 < 7 < 7 < 7 < 7 < - < - < -
[compare]
    input = _CROSSFADE
    compare = _CROSSFADE_HOLD_100
    ifgreater = 1
    else = 0
    output = _CROSSFADE_ASCENDING

[sample]
    bypass = _CROSSFADE_AT_0
    gate = _CROSSFADE_ASCENDING
    input = _CROSSFADE
    output = _CROSSFADE_HOLD_100

